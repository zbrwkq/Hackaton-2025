import { io, Socket } from 'socket.io-client';
import { useStore } from '../store/useStore';

let socket: Socket | null = null;

export const notificationWebSocket = {
  // Initialiser la connexion WebSocket
  connect: (userId: string) => {
    if (socket) {
      socket.disconnect();
    }
    
    // Connexion au serveur WebSocket
    socket = io('http://localhost:3000/notifications');
    
    // Enregistrer l'utilisateur pour recevoir ses notifications
    socket.emit('register', userId);
    
    // Log des utilisateurs connectÃ©s
    socket.on('updateUsers', (users: string[]) => {
      console.log('ðŸ‘¥ Liste des utilisateurs connectÃ©s :', users);
    });
    
    // Ã‰couter les notifications en temps rÃ©el
    socket.on('notification', (notification: any) => {
      console.log('ðŸ“© Notification reÃ§ue via WebSocket :', notification);
      
      // Ajouter la notification au store global
      const { addNotification } = useStore.getState();
      addNotification(notification);
    });
    
    console.log(`ðŸŸ¢ WebSocket connectÃ© pour l'utilisateur: ${userId}`);
    
    return socket;
  },
  
  // DÃ©connecter le WebSocket
  disconnect: () => {
    if (socket) {
      socket.disconnect();
      socket = null;
      console.log('ðŸ”´ WebSocket dÃ©connectÃ©');
    }
  },
  
  // VÃ©rifier si le WebSocket est connectÃ©
  isConnected: () => {
    return socket !== null && socket.connected;
  },
  
  // Obtenir l'instance du socket
  getSocket: () => socket
}; 