services:
  # Service Traefik
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard Traefik (optionnel, à sécuriser en production)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/config:/etc/traefik
    command:
      - "--api.insecure=true"  # Dashboard accessible sans authentification (à désactiver en production)
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    networks:
      - proxy-ntw   # Uniquement pour communiquer avec les services exposés publiquement

  # Service API Gateway
  api-gateway:
    build:
      context: ./BackEnd/api-getway
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`hackaton.local`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.api.middlewares=api-stripprefix@docker"
    environment:
      - PORT=3000
    volumes:
      - ./BackEnd/api-getway:/app
      - /app/node_modules
    networks:
      - proxy-ntw   # Pour recevoir les requêtes de Traefik
      - api-ntw     # Pour communiquer avec les services backend
    depends_on:
      - users-service
      - tweets-service
      - search-service
      - notification-service
      - backend-ia-service

  # Service Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`hackaton.local`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    networks:
      - proxy-ntw   # Uniquement pour recevoir les requêtes de Traefik

  # Service MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    environment:
      - MONGO_INITDB_DATABASE=HackatonTwitter
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - db-ntw     # Uniquement pour être accessible par les services qui ont besoin de la base de données
      
  # Service Search (backend)
  search-service:
    build:
      context: ./BackEnd/Search
      dockerfile: Dockerfile
    container_name: search-service
    restart: always
    depends_on:
      - mongodb
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/HackatonTwitter
      - SEARCH_SERVICE_PORT=6000
    volumes:
      - ./BackEnd/Search:/app
      - /app/node_modules
    networks:
      - db-ntw     # Pour accéder à MongoDB
      - api-ntw    # Pour être accessible par l'API Gateway
      
  # Service Tweets (backend)
  tweets-service:
    build:
      context: ./BackEnd/Tweets
      dockerfile: Dockerfile
    container_name: tweets-service
    restart: always
    depends_on:
      - mongodb
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/HackatonTwitter
      - TWEET_SERVICE_PORT=5002
    volumes:
      - ./BackEnd/Tweets:/app
      - /app/node_modules
    networks:
      - db-ntw     # Pour accéder à MongoDB
      - api-ntw    # Pour être accessible par l'API Gateway
      
  # Service Users (backend)
  users-service:
    build:
      context: ./BackEnd/users
      dockerfile: Dockerfile
    container_name: users-service
    restart: always
    depends_on:
      - mongodb
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/HackatonTwitter
      - PORT=5000
    volumes:
      - ./BackEnd/users:/app
      - /app/node_modules
    networks:
      - db-ntw     # Pour accéder à MongoDB
      - api-ntw    # Pour être accessible par l'API Gateway
      
  # Service IA (backend)
  backend-ia-service:
    build:
      context: ./backend-IA
      dockerfile: Dockerfile
    container_name: backend-ia-service
    restart: always
    environment:
      - PORT=5001
    volumes:
      - ./backend-IA:/app
      - ./backend-IA/uploads:/app/uploads
    networks:
      - api-ntw    # Uniquement pour être accessible par l'API Gateway
      
  # Service Notification (backend)
  notification-service:
    build:
      context: ./BackEnd/Notification
      dockerfile: Dockerfile
    container_name: notification-service
    restart: always
    depends_on:
      - mongodb
    # Configuration pour WebSocket (maintenue distincte de l'API Gateway)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notification-ws.rule=Host(`hackaton.local`) && PathPrefix(`/socket.io`)"
      - "traefik.http.routers.notification-ws.entrypoints=web"
      - "traefik.http.services.notification-ws.loadbalancer.server.port=5003"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/HackatonTwitter
      - NOTIFICATION_SERVICE_PORT=5003
    volumes:
      - ./BackEnd/Notification:/app
      - /app/node_modules
    networks:
      - db-ntw     # Pour accéder à MongoDB
      - api-ntw    # Pour être accessible par l'API Gateway
      - proxy-ntw  # Pour être accessible directement par Traefik pour les WebSockets

networks:
  # Réseau pour les communications exposées au monde extérieur via Traefik
  proxy-ntw:
    driver: bridge
  
  # Réseau pour les communications entre l'API Gateway et les services backend
  api-ntw:
    driver: bridge
  
  # Réseau pour les communications avec la base de données MongoDB
  db-ntw:
    driver: bridge

volumes:
  mongodb_data:
