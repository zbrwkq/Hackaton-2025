const Notification = require("../models/Notification");
const Tweet = require("../models/tweetModel"); // Importation du mod√®le Tweet
const User = require("../models/User"); // Importation du mod√®le User
const { sendNotification } = require("../socketManager");


// Cr√©er une notification et envoyer au propri√©taire du tweet
const getNotifications = async (req, res) => {
    try {
        const notifications = await Notification.find({ userId: req.params.userId }).sort({ createdAt: -1 });
        res.json(notifications || []);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des notifications:", error);
        res.status(500).json({ message: error.message });
    }
};

const markAsRead = async (req, res) => {
    try {
        const notification = await Notification.findByIdAndUpdate(
            req.params.id, { isRead: true }, { new: true }
        );
        if (!notification) return res.status(404).json({ message: "Notification non trouv√©e" });
        res.json(notification);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

/* const createNotification = async (req, res) => {
    try {
        const { type, relatedUserId, tweetId } = req.body;

        const tweet = await Tweet.findById(tweetId).populate("userId", "username");
        if (!tweet) return res.status(404).json({ message: "Tweet non trouv√©" });

        const userId = tweet.userId._id;
        const sender = await User.findById(relatedUserId).select("username");

        const notification = new Notification({ userId, type, relatedUserId, tweetId });
        await notification.save();

        sendNotification(userId, {
            type,
            senderUsername: sender.username,
            tweetId
        });

        console.log(`üì® Notification envoy√©e √† ${userId}`);
        res.status(201).json(notification);
    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation de la notification:", error);
        res.status(500).json({ message: "Erreur serveur", error: error.message });
    }
}; */

// ‚úÖ Cr√©er une notification et l'envoyer au propri√©taire du tweet
 const createNotification = async (req, res) => {
    try {
        const { type, relatedUserId, tweetId } = req.body;

        // üîç V√©rifier si le tweet existe et r√©cup√©rer le propri√©taire du tweet
        const tweet = await Tweet.findById(tweetId).populate("userId", "username");
        if (!tweet) return res.status(404).json({ message: "Tweet non trouv√©" });

        const ownerId = tweet.userId._id; // ‚úÖ R√©cup√©ration de l'ID du propri√©taire du tweet
        const sender = await User.findById(relatedUserId).select("username"); // ‚úÖ R√©cup√©ration du username de l'envoyeur

        // üî• Enregistrer la notification en base de donn√©es
        const notification = new Notification({ 
            userId: ownerId, 
            type, 
            relatedUserId, 
            tweetId 
        });
        await notification.save();

        // üî• V√©rifier si le propri√©taire du tweet est connect√©
        sendNotification(ownerId, {
            type,
            senderUsername: sender.username,
            tweetId
        });

        console.log(`üì® Notification envoy√©e en temps r√©el √† ${ownerId} (propri√©taire du tweet)`);

        res.status(201).json(notification);
    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation de la notification:", error);
        res.status(500).json({ message: "Erreur serveur", error: error.message });
    }
};


// ‚úÖ Correction de l'exportation
module.exports = {
    getNotifications,
    markAsRead,
    createNotification
};
