const Notification = require("../models/Notification");
const Tweet = require("../models/tweetModel"); // Importation du mod√®le Tweet
const User = require("../models/User"); // Importation du mod√®le User
const { sendNotification } = require("../socketManager");


// Cr√©er une notification et envoyer au propri√©taire du tweet
 const getNotifications = async (req, res) => {
    try {
        const notifications = await Notification.find({ userId: req.params.userId });

        console.log("üîç Notifications r√©cup√©r√©es :", notifications); // ‚úÖ Ajout du log

        res.json(notifications);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des notifications :", error);
        res.status(500).json({ message: "Erreur serveur", error: error.message });
    }
};


 const markAsRead = async (req, res) => {
    try {
        const notificationId = req.params.id;

        const notification = await Notification.findById(notificationId);
        if (!notification) {
            return res.status(404).json({ message: "Notification non trouv√©e" });
        }

        notification.isRead = true;
        await notification.save();

        console.log(`‚úÖ Notification ${notificationId} marqu√©e comme lue.`);
        res.json({ message: "Notification marqu√©e comme lue", notification });
    } catch (error) {
        console.error("‚ùå Erreur lors de la mise √† jour de la notification :", error);
        res.status(500).json({ message: "Erreur serveur", error: error.message });
    }
};


// ‚úÖ Cr√©er une notification et l'envoyer au propri√©taire du tweet
 /* const createNotification = async (req, res) => {
    try {
        const { type, relatedUserId, tweetId } = req.body;

        // üîç V√©rifier si le tweet existe et r√©cup√©rer le propri√©taire du tweet
        const tweet = await Tweet.findById(tweetId).populate("userId", "username");
        if (!tweet) return res.status(404).json({ message: "Tweet non trouv√©" });

        const ownerId = tweet.userId._id; // ‚úÖ R√©cup√©ration de l'ID du propri√©taire du tweet
        const sender = await User.findById(relatedUserId).select("username"); // ‚úÖ R√©cup√©ration du username de l'envoyeur

        // üî• Enregistrer la notification en base de donn√©es
        const notification = new Notification({ 
            userId: ownerId, 
            type, 
            relatedUserId, 
            tweetId 
        });
        await notification.save();

        // üî• V√©rifier si le propri√©taire du tweet est connect√©
        sendNotification(ownerId, {
            type,
            senderUsername: sender.username,
            tweetId
        });

        console.log(`üì® Notification envoy√©e en temps r√©el √† ${ownerId} (propri√©taire du tweet)`);

        res.status(201).json(notification);
    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation de la notification:", error);
        res.status(500).json({ message: "Erreur serveur", error: error.message });
    }
};

 */


 const createNotification = async (req, res) => {
    try {
        console.log("üì• Donn√©es re√ßues pour la notification :", req.body); // ‚úÖ V√©rification

        const { type, relatedUserId, tweetId } = req.body;

        // ‚úÖ V√©rifier que le tweetId est bien fourni
        if (!tweetId) {
            console.error("üö® ALERTE : tweetId est manquant !");
            return res.status(400).json({ message: "tweetId est requis pour cr√©er une notification !" });
        }

        // ‚úÖ R√©cup√©rer le propri√©taire du tweet
        const tweet = await Tweet.findById(tweetId);
        if (!tweet) {
            console.error("‚ùå Erreur : Tweet non trouv√© !");
            return res.status(404).json({ message: "Tweet non trouv√© !" });
        }

        const userId = tweet.userId; // ‚úÖ Le propri√©taire du tweet devient le destinataire

        console.log(`‚úÖ Notification envoy√©e au propri√©taire du tweet : ${userId}`);

        // ‚úÖ Cr√©er la notification en base de donn√©es
        const notification = new Notification({
            userId, // üëà On utilise le propri√©taire du tweet
            type,
            relatedUserId, // Celui qui a interagi avec le tweet
            tweetId,
            isRead: false
        });

        await notification.save();

        console.log("‚úÖ Notification cr√©√©e :", notification);

        // ‚úÖ Envoyer la notification via WebSocket
        sendNotification(userId, {
            _id: notification._id,
            type: notification.type,
            relatedUserId: notification.relatedUserId,
            tweetId: notification.tweetId,
            isRead: notification.isRead,
            createdAt: notification.createdAt
        });

        res.status(201).json(notification);
    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation de la notification:", error);
        res.status(500).json({ message: "Erreur lors de la cr√©ation de la notification" });
    }
};

// ‚úÖ Correction de l'exportation
module.exports = {
    getNotifications,
    markAsRead,
    createNotification
};
